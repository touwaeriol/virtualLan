// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Device_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Device_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Device_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Device_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Device_2eproto;
namespace vl {
namespace core {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace core
}  // namespace vl
PROTOBUF_NAMESPACE_OPEN
template<> ::vl::core::Device* Arena::CreateMaybeMessage<::vl::core::Device>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vl {
namespace core {

// ===================================================================

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vl.core.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit constexpr Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Device& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vl.core.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kMacFieldNumber = 2,
    kIpFieldNumber = 4,
    kIpv6FieldNumber = 6,
    kPublicIpFieldNumber = 8,
    kPublicIpv6FieldNumber = 9,
    kGroupFieldNumber = 10,
    kMtuFieldNumber = 3,
    kIpNetmaskFieldNumber = 5,
    kPrefixLengthFieldNumber = 7,
  };
  // string clientId = 1;
  void clear_clientid();
  const std::string& clientid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_clientid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_clientid();
  PROTOBUF_NODISCARD std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // string mac = 2;
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string ipv6 = 6;
  void clear_ipv6();
  const std::string& ipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6();
  PROTOBUF_NODISCARD std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // string publicIp = 8;
  void clear_publicip();
  const std::string& publicip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publicip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publicip();
  PROTOBUF_NODISCARD std::string* release_publicip();
  void set_allocated_publicip(std::string* publicip);
  private:
  const std::string& _internal_publicip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publicip(const std::string& value);
  std::string* _internal_mutable_publicip();
  public:

  // string publicIpv6 = 9;
  void clear_publicipv6();
  const std::string& publicipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_publicipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_publicipv6();
  PROTOBUF_NODISCARD std::string* release_publicipv6();
  void set_allocated_publicipv6(std::string* publicipv6);
  private:
  const std::string& _internal_publicipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_publicipv6(const std::string& value);
  std::string* _internal_mutable_publicipv6();
  public:

  // string group = 10;
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // uint32 mtu = 3;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // uint32 ipNetmask = 5;
  void clear_ipnetmask();
  uint32_t ipnetmask() const;
  void set_ipnetmask(uint32_t value);
  private:
  uint32_t _internal_ipnetmask() const;
  void _internal_set_ipnetmask(uint32_t value);
  public:

  // uint32 prefixLength = 7;
  void clear_prefixlength();
  uint32_t prefixlength() const;
  void set_prefixlength(uint32_t value);
  private:
  uint32_t _internal_prefixlength() const;
  void _internal_set_prefixlength(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:vl.core.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicipv6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
  uint32_t mtu_;
  uint32_t ipnetmask_;
  uint32_t prefixlength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Device_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// string clientId = 1;
inline void Device::clear_clientid() {
  clientid_.ClearToEmpty();
}
inline const std::string& Device::clientid() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.clientId)
  return _internal_clientid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_clientid(ArgT0&& arg0, ArgT... args) {
 
 clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.clientId)
}
inline std::string* Device::mutable_clientid() {
  std::string* _s = _internal_mutable_clientid();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.clientId)
  return _s;
}
inline const std::string& Device::_internal_clientid() const {
  return clientid_.Get();
}
inline void Device::_internal_set_clientid(const std::string& value) {
  
  clientid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_clientid() {
  
  return clientid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_clientid() {
  // @@protoc_insertion_point(field_release:vl.core.Device.clientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {
    
  } else {
    
  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (clientid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.clientId)
}

// string mac = 2;
inline void Device::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& Device::mac() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_mac(ArgT0&& arg0, ArgT... args) {
 
 mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.mac)
}
inline std::string* Device::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.mac)
  return _s;
}
inline const std::string& Device::_internal_mac() const {
  return mac_.Get();
}
inline void Device::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_mac() {
  // @@protoc_insertion_point(field_release:vl.core.Device.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mac_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    mac_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.mac)
}

// uint32 mtu = 3;
inline void Device::clear_mtu() {
  mtu_ = 0u;
}
inline uint32_t Device::_internal_mtu() const {
  return mtu_;
}
inline uint32_t Device::mtu() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.mtu)
  return _internal_mtu();
}
inline void Device::_internal_set_mtu(uint32_t value) {
  
  mtu_ = value;
}
inline void Device::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:vl.core.Device.mtu)
}

// string ip = 4;
inline void Device::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Device::ip() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.ip)
}
inline std::string* Device::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.ip)
  return _s;
}
inline const std::string& Device::_internal_ip() const {
  return ip_.Get();
}
inline void Device::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_ip() {
  // @@protoc_insertion_point(field_release:vl.core.Device.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.ip)
}

// uint32 ipNetmask = 5;
inline void Device::clear_ipnetmask() {
  ipnetmask_ = 0u;
}
inline uint32_t Device::_internal_ipnetmask() const {
  return ipnetmask_;
}
inline uint32_t Device::ipnetmask() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.ipNetmask)
  return _internal_ipnetmask();
}
inline void Device::_internal_set_ipnetmask(uint32_t value) {
  
  ipnetmask_ = value;
}
inline void Device::set_ipnetmask(uint32_t value) {
  _internal_set_ipnetmask(value);
  // @@protoc_insertion_point(field_set:vl.core.Device.ipNetmask)
}

// string ipv6 = 6;
inline void Device::clear_ipv6() {
  ipv6_.ClearToEmpty();
}
inline const std::string& Device::ipv6() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.ipv6)
  return _internal_ipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_ipv6(ArgT0&& arg0, ArgT... args) {
 
 ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.ipv6)
}
inline std::string* Device::mutable_ipv6() {
  std::string* _s = _internal_mutable_ipv6();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.ipv6)
  return _s;
}
inline const std::string& Device::_internal_ipv6() const {
  return ipv6_.Get();
}
inline void Device::_internal_set_ipv6(const std::string& value) {
  
  ipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_ipv6() {
  
  return ipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_ipv6() {
  // @@protoc_insertion_point(field_release:vl.core.Device.ipv6)
  return ipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  ipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipv6,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipv6_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.ipv6)
}

// uint32 prefixLength = 7;
inline void Device::clear_prefixlength() {
  prefixlength_ = 0u;
}
inline uint32_t Device::_internal_prefixlength() const {
  return prefixlength_;
}
inline uint32_t Device::prefixlength() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.prefixLength)
  return _internal_prefixlength();
}
inline void Device::_internal_set_prefixlength(uint32_t value) {
  
  prefixlength_ = value;
}
inline void Device::set_prefixlength(uint32_t value) {
  _internal_set_prefixlength(value);
  // @@protoc_insertion_point(field_set:vl.core.Device.prefixLength)
}

// string publicIp = 8;
inline void Device::clear_publicip() {
  publicip_.ClearToEmpty();
}
inline const std::string& Device::publicip() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.publicIp)
  return _internal_publicip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_publicip(ArgT0&& arg0, ArgT... args) {
 
 publicip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.publicIp)
}
inline std::string* Device::mutable_publicip() {
  std::string* _s = _internal_mutable_publicip();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.publicIp)
  return _s;
}
inline const std::string& Device::_internal_publicip() const {
  return publicip_.Get();
}
inline void Device::_internal_set_publicip(const std::string& value) {
  
  publicip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_publicip() {
  
  return publicip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_publicip() {
  // @@protoc_insertion_point(field_release:vl.core.Device.publicIp)
  return publicip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_publicip(std::string* publicip) {
  if (publicip != nullptr) {
    
  } else {
    
  }
  publicip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publicip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    publicip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.publicIp)
}

// string publicIpv6 = 9;
inline void Device::clear_publicipv6() {
  publicipv6_.ClearToEmpty();
}
inline const std::string& Device::publicipv6() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.publicIpv6)
  return _internal_publicipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_publicipv6(ArgT0&& arg0, ArgT... args) {
 
 publicipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.publicIpv6)
}
inline std::string* Device::mutable_publicipv6() {
  std::string* _s = _internal_mutable_publicipv6();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.publicIpv6)
  return _s;
}
inline const std::string& Device::_internal_publicipv6() const {
  return publicipv6_.Get();
}
inline void Device::_internal_set_publicipv6(const std::string& value) {
  
  publicipv6_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_publicipv6() {
  
  return publicipv6_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_publicipv6() {
  // @@protoc_insertion_point(field_release:vl.core.Device.publicIpv6)
  return publicipv6_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_publicipv6(std::string* publicipv6) {
  if (publicipv6 != nullptr) {
    
  } else {
    
  }
  publicipv6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicipv6,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (publicipv6_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    publicipv6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.publicIpv6)
}

// string group = 10;
inline void Device::clear_group() {
  group_.ClearToEmpty();
}
inline const std::string& Device::group() const {
  // @@protoc_insertion_point(field_get:vl.core.Device.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_group(ArgT0&& arg0, ArgT... args) {
 
 group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vl.core.Device.group)
}
inline std::string* Device::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:vl.core.Device.group)
  return _s;
}
inline const std::string& Device::_internal_group() const {
  return group_.Get();
}
inline void Device::_internal_set_group(const std::string& value) {
  
  group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_group() {
  
  return group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Device::release_group() {
  // @@protoc_insertion_point(field_release:vl.core.Device.group)
  return group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Device::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    group_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vl.core.Device.group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace vl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Device_2eproto
