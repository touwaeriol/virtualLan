// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RegisterService.proto

#include "RegisterService.pb.h"
#include "RegisterService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vl {
namespace core {

static const char* RegisterService_method_names[] = {
  "/vl.core.RegisterService/registe",
  "/vl.core.RegisterService/cancel",
};

std::unique_ptr< RegisterService::Stub> RegisterService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegisterService::Stub> stub(new RegisterService::Stub(channel, options));
  return stub;
}

RegisterService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registe_(RegisterService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_cancel_(RegisterService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegisterService::Stub::registe(::grpc::ClientContext* context, const ::vl::core::RegisterRequest& request, ::vl::core::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vl::core::RegisterRequest, ::vl::core::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registe_, context, request, response);
}

void RegisterService::Stub::async::registe(::grpc::ClientContext* context, const ::vl::core::RegisterRequest* request, ::vl::core::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vl::core::RegisterRequest, ::vl::core::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registe_, context, request, response, std::move(f));
}

void RegisterService::Stub::async::registe(::grpc::ClientContext* context, const ::vl::core::RegisterRequest* request, ::vl::core::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vl::core::RegisterResponse>* RegisterService::Stub::PrepareAsyncregisteRaw(::grpc::ClientContext* context, const ::vl::core::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vl::core::RegisterResponse, ::vl::core::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vl::core::RegisterResponse>* RegisterService::Stub::AsyncregisteRaw(::grpc::ClientContext* context, const ::vl::core::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RegisterService::Stub::cancel(::grpc::ClientContext* context, const ::vl::core::CancelRequest& request, ::vl::core::CancelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vl::core::CancelRequest, ::vl::core::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_cancel_, context, request, response);
}

void RegisterService::Stub::async::cancel(::grpc::ClientContext* context, const ::vl::core::CancelRequest* request, ::vl::core::CancelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vl::core::CancelRequest, ::vl::core::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_, context, request, response, std::move(f));
}

void RegisterService::Stub::async::cancel(::grpc::ClientContext* context, const ::vl::core::CancelRequest* request, ::vl::core::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_cancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vl::core::CancelResponse>* RegisterService::Stub::PrepareAsynccancelRaw(::grpc::ClientContext* context, const ::vl::core::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vl::core::CancelResponse, ::vl::core::CancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_cancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vl::core::CancelResponse>* RegisterService::Stub::AsynccancelRaw(::grpc::ClientContext* context, const ::vl::core::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsynccancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

RegisterService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegisterService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegisterService::Service, ::vl::core::RegisterRequest, ::vl::core::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vl::core::RegisterRequest* req,
             ::vl::core::RegisterResponse* resp) {
               return service->registe(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegisterService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegisterService::Service, ::vl::core::CancelRequest, ::vl::core::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RegisterService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vl::core::CancelRequest* req,
             ::vl::core::CancelResponse* resp) {
               return service->cancel(ctx, req, resp);
             }, this)));
}

RegisterService::Service::~Service() {
}

::grpc::Status RegisterService::Service::registe(::grpc::ServerContext* context, const ::vl::core::RegisterRequest* request, ::vl::core::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegisterService::Service::cancel(::grpc::ServerContext* context, const ::vl::core::CancelRequest* request, ::vl::core::CancelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vl
}  // namespace core

