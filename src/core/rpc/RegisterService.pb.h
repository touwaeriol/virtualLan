// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RegisterService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RegisterService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RegisterService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Device.pb.h"
#include "ResponseCode.pb.h"
#include "RequestCode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RegisterService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RegisterService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RegisterService_2eproto;
namespace vl {
namespace core {
class CancelRequest;
struct CancelRequestDefaultTypeInternal;
extern CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
class CancelResponse;
struct CancelResponseDefaultTypeInternal;
extern CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
}  // namespace core
}  // namespace vl
PROTOBUF_NAMESPACE_OPEN
template<> ::vl::core::CancelRequest* Arena::CreateMaybeMessage<::vl::core::CancelRequest>(Arena*);
template<> ::vl::core::CancelResponse* Arena::CreateMaybeMessage<::vl::core::CancelResponse>(Arena*);
template<> ::vl::core::RegisterRequest* Arena::CreateMaybeMessage<::vl::core::RegisterRequest>(Arena*);
template<> ::vl::core::RegisterResponse* Arena::CreateMaybeMessage<::vl::core::RegisterResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vl {
namespace core {

// ===================================================================

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vl.core.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit constexpr RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vl.core.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDeviceFieldNumber = 2,
  };
  // .vl.core.RequestCode status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::vl::core::RequestCode& status() const;
  PROTOBUF_NODISCARD ::vl::core::RequestCode* release_status();
  ::vl::core::RequestCode* mutable_status();
  void set_allocated_status(::vl::core::RequestCode* status);
  private:
  const ::vl::core::RequestCode& _internal_status() const;
  ::vl::core::RequestCode* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::vl::core::RequestCode* status);
  ::vl::core::RequestCode* unsafe_arena_release_status();

  // .vl.core.Device device = 2;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::vl::core::Device& device() const;
  PROTOBUF_NODISCARD ::vl::core::Device* release_device();
  ::vl::core::Device* mutable_device();
  void set_allocated_device(::vl::core::Device* device);
  private:
  const ::vl::core::Device& _internal_device() const;
  ::vl::core::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::vl::core::Device* device);
  ::vl::core::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:vl.core.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vl::core::RequestCode* status_;
  ::vl::core::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegisterService_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vl.core.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {}
  ~RegisterResponse() override;
  explicit constexpr RegisterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegisterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vl.core.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDeviceFieldNumber = 2,
  };
  // .vl.core.ResponseCode status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::vl::core::ResponseCode& status() const;
  PROTOBUF_NODISCARD ::vl::core::ResponseCode* release_status();
  ::vl::core::ResponseCode* mutable_status();
  void set_allocated_status(::vl::core::ResponseCode* status);
  private:
  const ::vl::core::ResponseCode& _internal_status() const;
  ::vl::core::ResponseCode* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::vl::core::ResponseCode* status);
  ::vl::core::ResponseCode* unsafe_arena_release_status();

  // .vl.core.Device device = 2;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::vl::core::Device& device() const;
  PROTOBUF_NODISCARD ::vl::core::Device* release_device();
  ::vl::core::Device* mutable_device();
  void set_allocated_device(::vl::core::Device* device);
  private:
  const ::vl::core::Device& _internal_device() const;
  ::vl::core::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::vl::core::Device* device);
  ::vl::core::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:vl.core.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vl::core::ResponseCode* status_;
  ::vl::core::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegisterService_2eproto;
};
// -------------------------------------------------------------------

class CancelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vl.core.CancelRequest) */ {
 public:
  inline CancelRequest() : CancelRequest(nullptr) {}
  ~CancelRequest() override;
  explicit constexpr CancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelRequest(const CancelRequest& from);
  CancelRequest(CancelRequest&& from) noexcept
    : CancelRequest() {
    *this = ::std::move(from);
  }

  inline CancelRequest& operator=(const CancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelRequest& operator=(CancelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelRequest* internal_default_instance() {
    return reinterpret_cast<const CancelRequest*>(
               &_CancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CancelRequest& a, CancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vl.core.CancelRequest";
  }
  protected:
  explicit CancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .vl.core.RequestCode status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::vl::core::RequestCode& status() const;
  PROTOBUF_NODISCARD ::vl::core::RequestCode* release_status();
  ::vl::core::RequestCode* mutable_status();
  void set_allocated_status(::vl::core::RequestCode* status);
  private:
  const ::vl::core::RequestCode& _internal_status() const;
  ::vl::core::RequestCode* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::vl::core::RequestCode* status);
  ::vl::core::RequestCode* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:vl.core.CancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vl::core::RequestCode* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegisterService_2eproto;
};
// -------------------------------------------------------------------

class CancelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vl.core.CancelResponse) */ {
 public:
  inline CancelResponse() : CancelResponse(nullptr) {}
  ~CancelResponse() override;
  explicit constexpr CancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelResponse(const CancelResponse& from);
  CancelResponse(CancelResponse&& from) noexcept
    : CancelResponse() {
    *this = ::std::move(from);
  }

  inline CancelResponse& operator=(const CancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelResponse& operator=(CancelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelResponse* internal_default_instance() {
    return reinterpret_cast<const CancelResponse*>(
               &_CancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CancelResponse& a, CancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vl.core.CancelResponse";
  }
  protected:
  explicit CancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDeviceFieldNumber = 2,
  };
  // .vl.core.ResponseCode status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::vl::core::ResponseCode& status() const;
  PROTOBUF_NODISCARD ::vl::core::ResponseCode* release_status();
  ::vl::core::ResponseCode* mutable_status();
  void set_allocated_status(::vl::core::ResponseCode* status);
  private:
  const ::vl::core::ResponseCode& _internal_status() const;
  ::vl::core::ResponseCode* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::vl::core::ResponseCode* status);
  ::vl::core::ResponseCode* unsafe_arena_release_status();

  // .vl.core.Device device = 2;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::vl::core::Device& device() const;
  PROTOBUF_NODISCARD ::vl::core::Device* release_device();
  ::vl::core::Device* mutable_device();
  void set_allocated_device(::vl::core::Device* device);
  private:
  const ::vl::core::Device& _internal_device() const;
  ::vl::core::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::vl::core::Device* device);
  ::vl::core::Device* unsafe_arena_release_device();

  // @@protoc_insertion_point(class_scope:vl.core.CancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vl::core::ResponseCode* status_;
  ::vl::core::Device* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RegisterService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterRequest

// .vl.core.RequestCode status = 1;
inline bool RegisterRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RegisterRequest::has_status() const {
  return _internal_has_status();
}
inline const ::vl::core::RequestCode& RegisterRequest::_internal_status() const {
  const ::vl::core::RequestCode* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::RequestCode&>(
      ::vl::core::_RequestCode_default_instance_);
}
inline const ::vl::core::RequestCode& RegisterRequest::status() const {
  // @@protoc_insertion_point(field_get:vl.core.RegisterRequest.status)
  return _internal_status();
}
inline void RegisterRequest::unsafe_arena_set_allocated_status(
    ::vl::core::RequestCode* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.RegisterRequest.status)
}
inline ::vl::core::RequestCode* RegisterRequest::release_status() {
  
  ::vl::core::RequestCode* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::RequestCode* RegisterRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:vl.core.RegisterRequest.status)
  
  ::vl::core::RequestCode* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::vl::core::RequestCode* RegisterRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::RequestCode>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::vl::core::RequestCode* RegisterRequest::mutable_status() {
  ::vl::core::RequestCode* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vl.core.RegisterRequest.status)
  return _msg;
}
inline void RegisterRequest::set_allocated_status(::vl::core::RequestCode* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:vl.core.RegisterRequest.status)
}

// .vl.core.Device device = 2;
inline bool RegisterRequest::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool RegisterRequest::has_device() const {
  return _internal_has_device();
}
inline const ::vl::core::Device& RegisterRequest::_internal_device() const {
  const ::vl::core::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::Device&>(
      ::vl::core::_Device_default_instance_);
}
inline const ::vl::core::Device& RegisterRequest::device() const {
  // @@protoc_insertion_point(field_get:vl.core.RegisterRequest.device)
  return _internal_device();
}
inline void RegisterRequest::unsafe_arena_set_allocated_device(
    ::vl::core::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.RegisterRequest.device)
}
inline ::vl::core::Device* RegisterRequest::release_device() {
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::Device* RegisterRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:vl.core.RegisterRequest.device)
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::vl::core::Device* RegisterRequest::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::vl::core::Device* RegisterRequest::mutable_device() {
  ::vl::core::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:vl.core.RegisterRequest.device)
  return _msg;
}
inline void RegisterRequest::set_allocated_device(::vl::core::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:vl.core.RegisterRequest.device)
}

// -------------------------------------------------------------------

// RegisterResponse

// .vl.core.ResponseCode status = 1;
inline bool RegisterResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool RegisterResponse::has_status() const {
  return _internal_has_status();
}
inline const ::vl::core::ResponseCode& RegisterResponse::_internal_status() const {
  const ::vl::core::ResponseCode* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::ResponseCode&>(
      ::vl::core::_ResponseCode_default_instance_);
}
inline const ::vl::core::ResponseCode& RegisterResponse::status() const {
  // @@protoc_insertion_point(field_get:vl.core.RegisterResponse.status)
  return _internal_status();
}
inline void RegisterResponse::unsafe_arena_set_allocated_status(
    ::vl::core::ResponseCode* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.RegisterResponse.status)
}
inline ::vl::core::ResponseCode* RegisterResponse::release_status() {
  
  ::vl::core::ResponseCode* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::ResponseCode* RegisterResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:vl.core.RegisterResponse.status)
  
  ::vl::core::ResponseCode* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::vl::core::ResponseCode* RegisterResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::ResponseCode>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::vl::core::ResponseCode* RegisterResponse::mutable_status() {
  ::vl::core::ResponseCode* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vl.core.RegisterResponse.status)
  return _msg;
}
inline void RegisterResponse::set_allocated_status(::vl::core::ResponseCode* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:vl.core.RegisterResponse.status)
}

// .vl.core.Device device = 2;
inline bool RegisterResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool RegisterResponse::has_device() const {
  return _internal_has_device();
}
inline const ::vl::core::Device& RegisterResponse::_internal_device() const {
  const ::vl::core::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::Device&>(
      ::vl::core::_Device_default_instance_);
}
inline const ::vl::core::Device& RegisterResponse::device() const {
  // @@protoc_insertion_point(field_get:vl.core.RegisterResponse.device)
  return _internal_device();
}
inline void RegisterResponse::unsafe_arena_set_allocated_device(
    ::vl::core::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.RegisterResponse.device)
}
inline ::vl::core::Device* RegisterResponse::release_device() {
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::Device* RegisterResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:vl.core.RegisterResponse.device)
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::vl::core::Device* RegisterResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::vl::core::Device* RegisterResponse::mutable_device() {
  ::vl::core::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:vl.core.RegisterResponse.device)
  return _msg;
}
inline void RegisterResponse::set_allocated_device(::vl::core::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:vl.core.RegisterResponse.device)
}

// -------------------------------------------------------------------

// CancelRequest

// .vl.core.RequestCode status = 1;
inline bool CancelRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CancelRequest::has_status() const {
  return _internal_has_status();
}
inline const ::vl::core::RequestCode& CancelRequest::_internal_status() const {
  const ::vl::core::RequestCode* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::RequestCode&>(
      ::vl::core::_RequestCode_default_instance_);
}
inline const ::vl::core::RequestCode& CancelRequest::status() const {
  // @@protoc_insertion_point(field_get:vl.core.CancelRequest.status)
  return _internal_status();
}
inline void CancelRequest::unsafe_arena_set_allocated_status(
    ::vl::core::RequestCode* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.CancelRequest.status)
}
inline ::vl::core::RequestCode* CancelRequest::release_status() {
  
  ::vl::core::RequestCode* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::RequestCode* CancelRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:vl.core.CancelRequest.status)
  
  ::vl::core::RequestCode* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::vl::core::RequestCode* CancelRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::RequestCode>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::vl::core::RequestCode* CancelRequest::mutable_status() {
  ::vl::core::RequestCode* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vl.core.CancelRequest.status)
  return _msg;
}
inline void CancelRequest::set_allocated_status(::vl::core::RequestCode* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:vl.core.CancelRequest.status)
}

// -------------------------------------------------------------------

// CancelResponse

// .vl.core.ResponseCode status = 1;
inline bool CancelResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool CancelResponse::has_status() const {
  return _internal_has_status();
}
inline const ::vl::core::ResponseCode& CancelResponse::_internal_status() const {
  const ::vl::core::ResponseCode* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::ResponseCode&>(
      ::vl::core::_ResponseCode_default_instance_);
}
inline const ::vl::core::ResponseCode& CancelResponse::status() const {
  // @@protoc_insertion_point(field_get:vl.core.CancelResponse.status)
  return _internal_status();
}
inline void CancelResponse::unsafe_arena_set_allocated_status(
    ::vl::core::ResponseCode* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.CancelResponse.status)
}
inline ::vl::core::ResponseCode* CancelResponse::release_status() {
  
  ::vl::core::ResponseCode* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::ResponseCode* CancelResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:vl.core.CancelResponse.status)
  
  ::vl::core::ResponseCode* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::vl::core::ResponseCode* CancelResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::ResponseCode>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::vl::core::ResponseCode* CancelResponse::mutable_status() {
  ::vl::core::ResponseCode* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vl.core.CancelResponse.status)
  return _msg;
}
inline void CancelResponse::set_allocated_status(::vl::core::ResponseCode* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:vl.core.CancelResponse.status)
}

// .vl.core.Device device = 2;
inline bool CancelResponse::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool CancelResponse::has_device() const {
  return _internal_has_device();
}
inline const ::vl::core::Device& CancelResponse::_internal_device() const {
  const ::vl::core::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::vl::core::Device&>(
      ::vl::core::_Device_default_instance_);
}
inline const ::vl::core::Device& CancelResponse::device() const {
  // @@protoc_insertion_point(field_get:vl.core.CancelResponse.device)
  return _internal_device();
}
inline void CancelResponse::unsafe_arena_set_allocated_device(
    ::vl::core::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vl.core.CancelResponse.device)
}
inline ::vl::core::Device* CancelResponse::release_device() {
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vl::core::Device* CancelResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:vl.core.CancelResponse.device)
  
  ::vl::core::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::vl::core::Device* CancelResponse::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::vl::core::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::vl::core::Device* CancelResponse::mutable_device() {
  ::vl::core::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:vl.core.CancelResponse.device)
  return _msg;
}
inline void CancelResponse::set_allocated_device(::vl::core::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:vl.core.CancelResponse.device)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core
}  // namespace vl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RegisterService_2eproto
